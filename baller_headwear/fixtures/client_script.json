[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-11-23 12:29:11.374289",
  "module": null,
  "name": "abcd",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    add_fields: [\"grand_total\", \"currency\"],\n    get_indicator: function(doc) {\n        return [__(doc.grand_total + \" \" + doc.currency), \"blue\", \"currency\"];\n    }\n};",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-23 12:30:53.251639",
  "module": null,
  "name": "bao",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    add_fields: [\"grand_total\", \"currency\"],\n    get_indicator: function(doc) {\n        return [__(doc.grand_total + \" \" + doc.currency), \"blue\", \"currency\"];\n    }\n};",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2024-12-14 23:26:43.852455",
  "module": "Baller Headwear",
  "name": "Work Order Customization (Create Material Request)",
  "script": "frappe.ui.form.on('Work Order', {\r\n    refresh: function (frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.add_custom_button(__('Create Material Request'), function () {\r\n                frappe.db.get_doc('Work Order Customization Settings')\r\n                    .then(settings => {\r\n                        frappe.new_doc('Material Request', {\r\n                            work_order: frm.doc.name,\r\n                            company: frm.doc.company,\r\n                            material_request_type: 'Material Transfer',\r\n                            set_from_warehouse: settings.source_warehouse,\r\n                            set_warehouse: settings.target_warehouse\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        frappe.msgprint(__('Failed to fetch Work Order Customization Settings'));\r\n                        console.error(err);\r\n                    });\r\n            }, __('Actions'));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2024-12-14 23:26:50.891499",
  "module": "Baller Headwear",
  "name": "Material Request Customization",
  "script": "frappe.ui.form.on('Material Request', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.add_custom_button(__('Material Transfer for Manufacture'), function() {\r\n                frappe.model.open_mapped_doc({\r\n                    method: \"baller_headwear.baller_headwear.api.make_stock_entry\",\r\n                    frm: frm,\r\n                    args: {\r\n                        stock_entry_type: \"Material Transfer for Manufacture\"\r\n                    }\r\n                });\r\n            }, __(\"Create\"));\r\n        }\r\n    }\r\n});\r\n\r\n// frappe.ui.form.on('Material Request', {\r\n//     refresh: function(frm) {\r\n//         frm.add_custom_button(__('Material Transfer for Manufacture'), function() {\r\n//             frappe.model.open_mapped_doc({\r\n//                 method: \"baller_headwear.baller_headwear.api.make_stock_entry\",\r\n//                 frm: frm,\r\n//                 args: {\r\n//                     stock_entry_type: \"Material Transfer for Manufacture\"\r\n//                 }\r\n//             });\r\n//         }, __(\"Create\"));\r\n//     }\r\n// });\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-12-14 23:26:35.415190",
  "module": "Vietnam Accounting Customization",
  "name": "Exchange Rate Customization",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm) {\r\n        console_log_sales_order_totals(frm);\r\n    }\r\n});\r\n\r\nfunction console_log_sales_order_totals(frm) {\r\n    let sales_order_totals = {};\r\n    let sales_order_ids = [];\r\n\r\n    frm.doc.items.forEach(function(item) {\r\n        if (item.sales_order) {\r\n            if (sales_order_totals[item.sales_order]) {\r\n                sales_order_totals[item.sales_order] += item.amount;\r\n            } else {\r\n                sales_order_totals[item.sales_order] = item.amount;\r\n                sales_order_ids.push(item.sales_order);\r\n            }\r\n        }\r\n    });\r\n\r\n    let sales_order_list = [];\r\n    for (let sales_order_id in sales_order_totals) {\r\n        sales_order_list.push({\r\n            sales_order_id: sales_order_id,\r\n            total_amount: sales_order_totals[sales_order_id],\r\n            exchange_rate: 1, \r\n            allocated_amount: 0 \r\n        });\r\n    }\r\n\r\n    console.log('Sales Orders and Total Amounts:', sales_order_list);\r\n    console.log('Unique Sales Order IDs:', sales_order_ids);\r\n\r\n\r\n    let updated_sales_order_list = reduce_advance_amounts(frm, sales_order_list);\r\n    console.log('Updated Sales Orders after reducing advance amounts:', updated_sales_order_list);\r\n}\r\n\r\n\r\nfunction reduce_advance_amounts(frm, sales_order_list) {\r\n\r\n    frm.doc.advances.forEach(function(advance) {\r\n        if (advance.reference_name) {\r\n\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Payment Entry',\r\n                    name: advance.reference_name\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        let payment_entry_doc = response.message;\r\n\r\n                        console.log('Fetched Payment Entry Doc:', payment_entry_doc);\r\n\r\n                        let source_exchange_rate = payment_entry_doc.source_exchange_rate;\r\n                        console.log('Payment Entry Source Exchange Rate:', source_exchange_rate);\r\n\r\n\r\n                        payment_entry_doc.references.forEach(function(reference) {\r\n\r\n                            let reference_sales_order_id = reference.reference_name;\r\n\r\n                            sales_order_list.forEach(function(order) {\r\n                                if (order.sales_order_id === reference_sales_order_id) {\r\n\r\n                                    let reduced_amount = order.total_amount - advance.advance_amount;\r\n                                    order.total_amount = reduced_amount < 0 ? 0 : reduced_amount;\r\n\r\n                                    order.exchange_rate = source_exchange_rate || 1;\r\n\r\n                                    order.allocated_amount += advance.advance_amount;\r\n\r\n                                    console.log('Updated Order with Exchange Rate and Allocated Amount:', order);\r\n                                }\r\n                            });\r\n                        });\r\n                    } else {\r\n                        console.error('Failed to fetch Payment Entry:', advance.reference_name);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return sales_order_list;\r\n}\r\n",
  "view": "Form"
 }
]