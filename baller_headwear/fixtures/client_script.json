[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2024-12-24 12:19:13.525269",
  "module": "Baller Headwear",
  "name": "Work Order Customization (Create Material Request)",
  "script": "frappe.ui.form.on('Work Order', {\r\n    refresh: function (frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.add_custom_button(__('Create Material Request'), function () {\r\n                frappe.db.get_doc('Work Order Customization Settings')\r\n                    .then(settings => {\r\n                        frappe.new_doc('Material Request', {\r\n                            work_order: frm.doc.name,\r\n                            company: frm.doc.company,\r\n                            material_request_type: 'Material Transfer',\r\n                            set_from_warehouse: settings.source_warehouse,\r\n                            set_warehouse: settings.target_warehouse\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        frappe.msgprint(__('Failed to fetch Work Order Customization Settings'));\r\n                        console.error(err);\r\n                    });\r\n            }, __('Actions'));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2024-12-24 12:19:23.062789",
  "module": "Baller Headwear",
  "name": "Material Request Customization",
  "script": "frappe.ui.form.on('Material Request', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.add_custom_button(__('Material Transfer for Manufacture'), function() {\r\n                frappe.model.open_mapped_doc({\r\n                    method: \"baller_headwear.baller_headwear.api.make_stock_entry\",\r\n                    frm: frm,\r\n                    args: {\r\n                        stock_entry_type: \"Material Transfer for Manufacture\"\r\n                    }\r\n                });\r\n            }, __(\"Create\"));\r\n        }\r\n    }\r\n});\r\n\r\n// frappe.ui.form.on('Material Request', {\r\n//     refresh: function(frm) {\r\n//         frm.add_custom_button(__('Material Transfer for Manufacture'), function() {\r\n//             frappe.model.open_mapped_doc({\r\n//                 method: \"baller_headwear.baller_headwear.api.make_stock_entry\",\r\n//                 frm: frm,\r\n//                 args: {\r\n//                     stock_entry_type: \"Material Transfer for Manufacture\"\r\n//                 }\r\n//             });\r\n//         }, __(\"Create\"));\r\n//     }\r\n// });\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-12-28 12:55:32.667886",
  "module": "Vietnam Accounting Customization",
  "name": "Exchange Rate Customization",
  "script": "frappe.ui.form.on('Sales Invoice', {     \r\n    custom_transaction_date_exchange_rate: function(frm) {         \r\n        console_log_sales_order_totals(frm);     \r\n    } \r\n});\r\n\r\nasync function console_log_sales_order_totals(frm) {     \r\n    if (!frm.doc.items || frm.doc.items.every(item => !item.item_code)) {\r\n        frappe.throw(__('Please add at least one item to the Sales Invoice before proceeding.'));\r\n    }\r\n\r\n    let sales_order_totals = {};     \r\n    let sales_order_ids = [];      \r\n\r\n    frm.doc.items.forEach(function(item) {         \r\n        if (item.sales_order) {             \r\n            if (sales_order_totals[item.sales_order]) {                 \r\n                sales_order_totals[item.sales_order] += item.amount;             \r\n            } else {                 \r\n                sales_order_totals[item.sales_order] = item.amount;                 \r\n                sales_order_ids.push(item.sales_order);             \r\n            }         \r\n        }     \r\n    });      \r\n\r\n    let sales_order_list = [];     \r\n    for (let sales_order_id in sales_order_totals) {         \r\n        sales_order_list.push({             \r\n            sales_order_id: sales_order_id,             \r\n            outstanding_amount: sales_order_totals[sales_order_id],             \r\n            exchange_rate: 1,              \r\n            allocated_amount: 0,             \r\n            payment_entry_id: null         \r\n        });     \r\n    }      \r\n\r\n    console.log('Sales Orders and Outstanding Amounts:', sales_order_list);     \r\n    console.log('Unique Sales Order IDs:', sales_order_ids);      \r\n\r\n    let updated_sales_order_list = await reduce_advance_amounts(frm, sales_order_list);     \r\n    console.log('Updated Sales Orders after reducing advance amounts:', updated_sales_order_list);      \r\n\r\n    let final_calculation = calculate_final_value(frm, updated_sales_order_list);     \r\n    console.log('Final Calculation:', final_calculation);      \r\n\r\n    frm.set_value('conversion_rate', final_calculation);     \r\n    frm.save();     \r\n    frappe.msgprint(__('Conversion Rate updated to: ' + final_calculation)); \r\n}  \r\n\r\nfunction reduce_advance_amounts(frm, sales_order_list) {     \r\n    let promises = [];     \r\n    let sales_order_ids_with_payment = [];     \r\n\r\n    frm.doc.advances.forEach(function(advance) {         \r\n        if (advance.reference_name) {             \r\n            let promise = new Promise((resolve, reject) => {                 \r\n                frappe.call({                     \r\n                    method: 'frappe.client.get',                     \r\n                    args: {                         \r\n                        doctype: 'Payment Entry',                         \r\n                        name: advance.reference_name                     \r\n                    },                     \r\n                    callback: function(response) {                         \r\n                        if (response.message) {                             \r\n                            let payment_entry_doc = response.message;                             \r\n                            let source_exchange_rate = payment_entry_doc.source_exchange_rate || 1;                             \r\n                            let payment_entry_id = payment_entry_doc.name;                             \r\n\r\n                            payment_entry_doc.references.forEach(function(reference) {                                 \r\n                                let reference_sales_order_id = reference.reference_name;                                 \r\n\r\n                                sales_order_ids_with_payment.push(reference_sales_order_id);\r\n\r\n                                sales_order_list.forEach(function(order) {                                     \r\n                                    if (order.sales_order_id === reference_sales_order_id) {                                         \r\n                                        let reduced_amount = order.outstanding_amount - advance.advance_amount;                                         \r\n                                        order.outstanding_amount = reduced_amount < 0 ? 0 : reduced_amount;                                         \r\n                                        order.exchange_rate = source_exchange_rate;                                         \r\n                                        order.allocated_amount += advance.advance_amount;                                         \r\n                                        order.payment_entry_id = payment_entry_id;                                     \r\n                                    }                                 \r\n                                });                             \r\n                            });                             \r\n                            resolve();                           \r\n                        } else {                             \r\n                            console.error('Failed to fetch Payment Entry:', advance.reference_name);                             \r\n                            reject();                         \r\n                        }                     \r\n                    }                 \r\n                });             \r\n            });             \r\n            promises.push(promise);         \r\n        }     \r\n    });      \r\n\r\n    return Promise.all(promises).then(() => {         \r\n        sales_order_list.forEach(function(order) {             \r\n            if (!sales_order_ids_with_payment.includes(order.sales_order_id)) {                 \r\n                frappe.throw(__('No Payment Entry found for Sales Order: ' + order.sales_order_id));             \r\n            }         \r\n        });         \r\n\r\n        return sales_order_list;     \r\n    }); \r\n}  \r\n\r\nfunction calculate_final_value(frm, sales_order_list) {     \r\n    let custom_transaction_exchange_rate = frm.doc.custom_transaction_date_exchange_rate || 1;     \r\n    console.log('Custom Exchange Rate:', custom_transaction_exchange_rate);      \r\n\r\n    let total_amount = frm.doc.total || 1;      \r\n\r\n    console.log('Total Amount:', total_amount);      \r\n\r\n    let total_outstanding_amount = 0;     \r\n    let total_allocated_amount = 0;      \r\n\r\n    sales_order_list.forEach(function(order) {         \r\n        total_outstanding_amount += order.outstanding_amount;         \r\n        total_allocated_amount += (order.allocated_amount * order.exchange_rate);     \r\n    });      \r\n\r\n    console.log('Total Outstanding Amount:', total_outstanding_amount);     \r\n    console.log('Total Allocated Amount:', total_allocated_amount);      \r\n\r\n    let outstanding_amount_value = total_outstanding_amount * custom_transaction_exchange_rate;     \r\n    let allocated_amount_value = total_allocated_amount;      \r\n\r\n    console.log('Outstanding Amount Value:', outstanding_amount_value);     \r\n    console.log('Allocated Amount Value:', allocated_amount_value);      \r\n\r\n    let final_value = (outstanding_amount_value + allocated_amount_value) / total_amount;      \r\n\r\n    console.log('Final Value:', final_value);     \r\n    return final_value; \r\n} \r\n",
  "view": "Form"
 }
]