[
 {
  "allow_guest": 0,
  "api_method": "get_required_materials_from_work_orders",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-10 11:18:06.467445",
  "module": "Baller Headwear",
  "name": "get_required_materials_from_work_orders",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def get_required_materials_from_work_orders(work_orders):\n    if isinstance(work_orders, str):\n        work_orders = frappe.parse_json(work_orders)\n\n    if not work_orders:\n        return []\n\n    materials = {}\n\n    for wo in work_orders:\n        bom_items = frappe.get_all(\n            \"Work Order Item\",\n            filters={\"parent\": wo},\n            fields=[\"item_code\", \"required_qty\", \"uom\"]\n        )\n        for item in bom_items:\n            key = (item[\"item_code\"], item[\"uom\"])\n            if key not in materials:\n                materials[key] = 0\n            materials[key] = materials[key] + item[\"required_qty\"]\n\n    return [\n        {\n            \"item_code\": key[0],\n            \"uom\": key[1],\n            \"total_qty\": qty\n        }\n        for key, qty in materials.items()\n    ]\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_work_orders_by_production_plan",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-10 11:18:06.624828",
  "module": "Baller Headwear",
  "name": "get_work_orders_by_production_plan",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def get_work_orders_by_production_plan(production_plan):\n    return frappe.get_all(\n        \"Work Order\",\n        filters={\"production_plan\": production_plan},\n        fields=[\"name\"]\n    )\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_pick_list_items_from_wo",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-10 11:18:06.600283",
  "module": "Baller Headwear",
  "name": "get_pick_list_items_from_wo",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def get_pick_list_items_from_wo(work_orders):\n    work_orders = frappe.parse_json(work_orders)\n    result = []\n\n    for wo in work_orders:\n        doc = frappe.get_doc(\"Work Order\", wo)\n        for item in doc.required_items:\n            result.append({\n                \"item_code\": item.item_code,\n                \"source_warehouse\": item.source_warehouse,\n                \"required_qty\": item.required_qty,\n                \"stock_qty\": item.transferred_qty or 0\n            })\n\n    return result\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-10 11:18:06.696959",
  "module": "Baller Headwear",
  "name": "Validate BOM Creator",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM Creator",
  "script": "valid_items = [doc.item_code] + [r.item_code for r in doc.items]\n\nfor row in doc.items:\n    if not row.fg_item:\n        frappe.throw(f\"Row {row.idx or '-'} is missing FG Item.\")\n\n    if row.custom_planned_fabric_needed <= 0:\n        frappe.throw(f\"Row {row.idx or '-'} ({row.item_code}) has invalid Planned Fabric Needed: {row.custom_planned_fabric_needed}\")\n\n    if row.fg_item not in valid_items:\n        frappe.throw(\n            f\"Row {row.idx or '-'}: FG Item '{row.fg_item}' is invalid. It must match the main Item Code '{doc.item_code}' or one of the Item Codes in the table.\"\n        )\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-10 11:18:06.673863",
  "module": "Baller Headwear",
  "name": "Validate FG Reference",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM Creator",
  "script": "parent_reference = {row.idx: row.name for row in doc.items}\n\nfor row in doc.items:\n    ref_id = \"\"\n\n    try:\n        parent_row_no = int(row.parent_row_no) if row.parent_row_no else None\n    except (ValueError, TypeError):\n        parent_row_no = None\n\n    if parent_row_no:\n        ref_id = parent_reference.get(parent_row_no)\n\n    if row.fg_reference_id and row.fg_reference_id == ref_id:\n        continue\n\n    if parent_row_no:\n        row.fg_reference_id = ref_id\n    elif row.fg_item == doc.item_code:\n        row.fg_reference_id = doc.name\n",
  "script_type": "DocType Event"
 }
]